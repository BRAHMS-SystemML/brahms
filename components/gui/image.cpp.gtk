/*
________________________________________________________________

	This file is part of BRAHMS
	Copyright (C) 2007 Ben Mitchinson
	URL: http://brahms.sourceforge.net

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
________________________________________________________________

	Subversion Repository Information (automatically updated on commit)

	$Id:: image.cpp.gtk 1800 2009-04-23 21:57:03Z benjmitch    $
	$Rev:: 1800                                                $
	$Author:: benjmitch                                        $
	$Date:: 2009-04-23 22:57:03 +0100 (Thu, 23 Apr 2009)       $
________________________________________________________________

*/



/*

	This component was developed by Ben Mitch from an original idea
	by Alex Cope, who developed a similar component for GTK. Here,
	we use wxWidgets for cross-platform compatibility.

*/



////////////////	COMPONENT INFO

//	component information
#define COMPONENT_CLASS_STRING "dev/std/gui/numeric/image"
#define COMPONENT_CLASS_CPP dev_std_gui_numeric_image_0 
#define COMPONENT_RELEASE __REL__
#define COMPONENT_REVISION __REV__
#define COMPONENT_ADDITIONAL "Author=Ben Mitch (original idea Alex Cope)\n" "URL=http://brahms.sourceforge.net\n"
#define COMPONENT_FLAGS F_NOT_RATE_CHANGER

//	include the core overlay, quick process mode
//	(you must have defined the above to use this)
#define OVERLAY_QUICKSTART_PROCESS
//#define MODULE_INIT_AND_TERM
#include "brahms-1199.h"

//	STL
#include <iostream>
#include <sstream>
using namespace std;

//	alias namespaces
namespace numeric = std_2009_data_numeric_0;
namespace spikes = std_2009_data_spikes_0;
namespace rng = std_2009_util_rng_0;

//	wx widgets
//#define WXUSINGDLL // define this if linking to a shared library (DLL) build of wx widgets
//	but we build static because it avoids DLL hell :)


/* ONLY DURING DEBUGGING */
//#define WXWIN_COMPATIBILITY_EVENT_TYPES 1

#include "wx/wx.h"
#include "wx/dcbuffer.h"
#include "wx/display.h"

//	include
#include "include/rgb.h"

//	parameters
const UINT32 COLORMAP_RESOLUTION = 256;
const UINT32 WX_INIT_MILLISECONDS = 5000;





////////////////	WINDOW CLASS

struct LOCATION
{
	UINT32 x;
	UINT32 y;
	UINT32 w;
	UINT32 h;
};

//#define COUT cout << this << " " <<
#define COUT cout <<
//#define DEBUG_COUT
//#define DEBUG_COUT_1

class MyWindow : public wxFrame
{

public:

	MyWindow(const wxString& title, const wxPoint& pos, const wxSize& size);

	UINT8* Prepare(UINT32 d1, UINT32 d2)
	{
		data = wxImage(d1, d2);
		return data.GetData();
	}

	void Lock(const char* caption)
	{
		//	lock
		mutex.Lock();

		//	set data
		this->caption = caption;
	}

	wxCondError Unlock()
	{
		//	refresh
		dataready = true;

		//	request a repaint
#ifdef DEBUG_COUT				
		COUT "Refresh() IN (wrapper)" << endl;
#endif
		Refresh();
#ifdef DEBUG_COUT				
		COUT "Refresh() OUT (wrapper)" << endl;
#endif

		//	sleep until data has been processed
#ifdef DEBUG_COUT				
		COUT "Wait() IN" << endl;
#endif
		wxCondError err = cond.WaitTimeout(100);
#ifdef DEBUG_COUT				
		COUT "Wait() OUT" << endl;
#endif

		//	unlock
#ifdef DEBUG_COUT				
		COUT "Mutex() IN" << endl;
#endif
		mutex.Unlock();
#ifdef DEBUG_COUT				
		COUT "Mutex() OUT" << endl;
#endif

		//	ok
		return err;
	}

	void OnPaint(wxPaintEvent &event)
	{
		//	http://ubuntuforums.org/showthread.php?t=805450
#ifdef DEBUG_COUT_1
		COUT "OnPaint() Mutex::Lock() IN" << endl;
#endif
		mutex.Lock();
#ifdef DEBUG_COUT_1				
//		COUT "OnPaint() Mutex::Lock() OUT" << endl;
#endif

		//	prepare DC - we do this whether there is data waiting or not,
		//	since it seems to let the system know that we've validated
		//	the window contents and if we don't it keeps sending us WM_PAINT
		//	this makes sense if getting this DC corresponds to the windows
		//	function BeginPaint, since BeginPaint does indeed serve to validate
		//	the entire client area, so presumably if you don't call BeginPaint
		//	you will get WM_PAINT again. probably something similar goes on in
		//	GTK.
		wxBufferedPaintDC dc(this);

		//	if data ready
		if (dataready)
		{
#ifdef DEBUG_COUT_1				
			COUT "OnPaint() data was ready" << endl;
#endif
		
			//	get DC size
			INT32 w, h;
			GetClientSize(&w, &h);

			//	access data (and resize image)
			wxImage img = data.Scale(w, h);
			string caption = this->caption;

			//	add image to DC
			wxBitmap bitmap(img);
			dc.DrawBitmap(bitmap, 0, 0);

			//	add some text
			if (caption.length())
			{
				wxFont font(10, wxFONTFAMILY_MODERN, wxNORMAL, wxBOLD, false);
				dc.SetFont(font);
				dc.SetTextForeground(*wxWHITE);
				wxString str(caption.c_str(), wxConvUTF8);
				dc.DrawText( str, 10, 10 );
			}

			//	flag that we've used the data
			dataready = false;

			//	release the waiting data thread
			cond.Signal();
		}

#ifdef DEBUG_COUT_1				
//		COUT "OnPaint() Mutex::Unlock() IN" << endl;
#endif
		mutex.Unlock();
#ifdef DEBUG_COUT_1				
		COUT "OnPaint() Mutex::Unlock() OUT" << endl;
#endif
	}

	//	data
	wxImage data;
	string caption;
	bool dataready;

	//	mutex
	wxMutex mutex;
	wxCondition cond;
	
	//	events
	DECLARE_EVENT_TABLE()

};

BEGIN_EVENT_TABLE(MyWindow, wxFrame)
EVT_PAINT(MyWindow::OnPaint)
END_EVENT_TABLE()

MyWindow::MyWindow(const wxString& title, const wxPoint& pos, const wxSize& size)
	: wxFrame((wxFrame *)NULL, -1, title, pos, size), cond(mutex)
{
	//	data not yet ready for painting
	dataready = false;

	//	support double-buffering (see help for wxBufferedPaintDC)
	SetBackgroundStyle(wxBG_STYLE_CUSTOM);
}



////////////////	APPLICATION CLASS

//	global
bool appIsActive = false;

class MyApp : public wxApp
{

public:

	bool OnInit()
	{
//		cout << "MyApp::OnInit()" << endl;

		//	get client area
		wxDisplay display;
		clientArea = display.GetClientArea();
	
#ifdef __LINUX__

		//	mark that we should not exit when there is no top-level window present
		SetExitOnFrameDelete(false);

#else

		//	create main window (to force event processing)
		//
		//	for reasons unknown, the above Linux code doesn't work on Windows??? events
		//	never get processed - i'll have to look into the wx source code to see what's
		//	happening. however, creating a main window makes events get processed, presumably
		//	something to do with you can't have a msg loop without a window? oh who knows
		mainWindow = new MyWindow( _T(COMPONENT_CLASS_STRING), wxPoint(300,50), wxSize(450,340) );

		//	but no need to show it, since it's only for event processing
		//mainWindow->Show(TRUE);

#endif

		//	disable wxEVT_UPDATE_UI because we don't use it
		wxUpdateUIEvent::SetMode(wxUPDATE_UI_PROCESS_SPECIFIED);
		
		//	disable wxEVT_IDLE because we don't use it
		wxIdleEvent::SetMode(wxIDLE_PROCESS_SPECIFIED);
		
		//	flag that we've initialised
		appIsActive = true;
		
		//	ok
		return TRUE;
	}
	
	int OnExit()
	{
//		cout << "MyApp::OnExit()" << endl;
		
		//	flag that we've terminated
		appIsActive = false;

		//	ok
		return 0;
	}

	int OnIdle()
	{
		cout << "MyApp::OnIdle()" << endl;

		//	ok
		return 0;
	}

	int FilterEvent(wxEvent& event)
	{
		//	create window
		if (event.GetEventType() == 0xFF01)
		{
			//	get window handle
			INT32 hWindow = event.GetId();

			//	create output window
			wxString str(caption.c_str(), wxConvUTF8);
			windows[hWindow] = new MyWindow( str, wxPoint(300,50), wxSize(450,340) );
			windows[hWindow]->SetSize(location.x, location.y, location.w, location.h);
			windows[hWindow]->SetWindowStyle(wxRESIZE_BORDER | wxCAPTION | wxCLIP_CHILDREN | wxFRAME_TOOL_WINDOW);
			wxSize sz(64, 64);
			windows[hWindow]->SetMinSize(sz);
			windows[hWindow]->Show(TRUE);

			//	processed
			return 1;
		}

		//	destroy window
		if (event.GetEventType() == 0xFF02)
		{
			//	get window handle
			INT32 hWindow = event.GetId();

			//	destroy output window
			windows[hWindow]->Close();

			//	processed
			return 1;
		}
		
		//	report
		if (event.GetEventType() == wxEVT_IDLE)
		{
			cout << "FilterEvent(wxEVT_IDLE) " << event.GetEventObject() << endl;

			//	processed
			return 1;
		}
		
		/*
		else if (event.GetEventType() == wxEVT_UPDATE_UI)
		{
			cout << "FilterEvent(wxEVT_UPDATE_UI)" << endl;
			
			//	processed
			return 1;
		}
		*/
		
		else if (event.GetEventType() == wxEVT_PAINT)
		{
		
			cout << "FilterEvent(wxEVT_PAINT)" << endl;
		}
		
		else if (event.GetEventType() == wxEVT_ERASE_BACKGROUND)
		{
			cout << "FilterEvent(wxEVT_ERASE_BACKGROUND)" << endl;
			
			//	processed
			return 1;
		}
		
		else if (event.GetEventType() == wxEVT_NC_PAINT)
		{
			cout << "FilterEvent(wxEVT_NC_PAINT)" << endl;
		}
		
		else if (event.GetEventType() == wxEVT_SHOW)
		{
			cout << "FilterEvent(wxEVT_SHOW)" << endl;
		}
		
		else if (event.GetEventType() == wxEVT_ACTIVATE)
		{
			cout << "FilterEvent(wxEVT_ACTIVATE)" << endl;
		}
		
		else if (event.GetEventType() == wxEVT_ACTIVATE_APP)
		{
			cout << "FilterEvent(wxEVT_ACTIVATE_APP)" << endl;
		}
		
		else
		{
			cout << "FilterEvent(" << hex << event.GetEventType() << ") " << dec << endl;
		}

		//	pass on
		return -1;
	}

    INT32 CreateWindow(LOCATION location, const string& caption)
	{
		//	protect against multiple simultaneous callers
		mutex.Lock();

		//	new window object
		INT32 hWindow = windows.size();
		this->location = location;
		this->caption = caption;

		//	add it (window will set its own pointer on creation)
		windows.push_back(NULL);

		//	post msg to myself for processing by the msg loop thread
		wxCommandEvent event(0xFF01, hWindow);
		AddPendingEvent(event);

		//	wait for creation
		int count = 0;
		while(!windows.back())
		{
			//	must sleep for non-zero time, since the thread we are running
			//	in may have a higher priority than the wxApp thread
			wxMilliSleep(1);

			//	break
			count++;
			if (count >= 1000) berr << "wxWidgets window was not created in good time";
		}

		//	protect against multiple simultaneous callers
		mutex.Unlock();

		//	ok - note that the window may not yet have been created
		return hWindow;
	}

	UINT8* PrepareWindow(INT32 hWindow, UINT32 d1, UINT32 d2)
	{
		return windows[hWindow]->Prepare(d1, d2);
	}

	void Lock(INT32 hWindow, const char* caption)
	{
		windows[hWindow]->Lock(caption);
	}

	wxCondError Unlock(INT32 hWindow)
	{
		//	wait for window to finish its paint routine
		wxCondError err = windows[hWindow]->Unlock();
		
		return err;
	}

    void DestroyWindow(INT32 hWindow)
	{
		//	post msg to myself for processing by the msg loop thread
		wxCommandEvent event(0xFF02, hWindow);
		AddPendingEvent(event);
	}

    void Terminate()
    {
		//	request exit main loop
		ExitMainLoop();
		
		//	post msg to force loop to iterate
		wxCommandEvent event(0xFF08, 0);
		AddPendingEvent(event);

		//	wait for thread to terminate
		while(appIsActive)
			wxMilliSleep(1);
			
		/*
		
			NOTE: this may work, or it may be that sometimes we drop
			through here after the thread has set the flag to false,
			but before the thread has actually terminated. We can't
			check IsActive() or IsRunning() on the thread, since it
			is of "Joinable" type - perhaps to find out for sure if
			the thread is finished, we have to use a Joinable thread?
		
		*/
    }
	
	wxRect getClientArea()
	{
		return clientArea;
	}

private:

	//	temp
	LOCATION location;
	string caption;
	wxRect clientArea;

	//	output windows
	wxMutex mutex;
	vector<MyWindow*> windows;

	//	main window
	MyWindow* mainWindow;

};



////////	IMPLEMENT_APP_NO_MAIN(MyApp)

MyApp& wxGetApp()
{
	return *wx_static_cast(MyApp*, wxApp::GetInstance());
}

wxAppConsole *wxCreateApp()
{
    wxAppConsole::CheckBuildOptions(
    	WX_BUILD_OPTIONS_SIGNATURE,
		"your program");
    return new MyApp;
}

wxAppInitializer wxTheAppInitializer((wxAppInitializerFunction) wxCreateApp);



////////////////	THREAD CLASS

class MyThread : public wxThread
{
public:
	ExitCode Entry()
	{
		try
		{
		    // app initialization
		    if ( !wxGetApp().CallOnInit() )
		    {
		        // don't call OnExit() if OnInit() failed
		        return 0;
		    }

		    // ensure that OnExit() is called if OnInit() had succeeded
		    class CallOnExit
		    {
		    public:
		        ~CallOnExit()
		        {
		        	wxGetApp().OnExit();
		        }
		    }
		    callOnExit;

		    // app execution
		    wxGetApp().OnRun();
		    return 0;
		}
		catch(...)
		{
			wxGetApp().OnUnhandledException();
			return 0;
		}
	}
};

MyThread* thread = NULL;



////////////////	DLL INIT AND TERM

bool wxInitialized = false;

int wxInit()
{
    //	initialize wx library
    if (!wxInitialize()) return 1;
    wxInitialized = true;

	//	create auxiliary thread
	thread = new MyThread();
	thread->Create();
	thread->Run();

	//	wait for app to initialize
	int count = 0;
	while(!appIsActive)
	{
		//	must sleep for non-zero time, since the thread we are running
		//	in may have a higher priority than the wxApp thread
		wxMilliSleep(1);

		//	break
		count++;
		if (count >= WX_INIT_MILLISECONDS)
			return 2;
			//berr << "wxApp did not initialize in good time";
	}

//	cout << "waited " << count << "ms for wx" << endl;

	//	ok
	return 0;
}

void wxTerm()
{
	//	only if initialized
	if (!wxInitialized) return;
	
	//	terminate app
//	cout << "Terminate()" << endl;
	wxGetApp().Terminate();
//	cout << "~Terminate()" << endl;

	//	uninit wx - if this gets called before the thread
	//	has exited, we get a debug message indicating that
	//	we've done something wrong. (at least when linking
	//	to a debug build...) solution would be to
	//	robustly wait in MyApp::Terminate() until the thread
	//	has exited - see note in MyApp::Terminate().	
//	cout << "wxUnit()" << endl;
	wxUninitialize();
//	cout << "~wxUnit()" << endl;
}

/*

NOTE: These solutions are platform-specific module-level solutions to
init and term WX. Unfortunately, they don't work quite. What works on
both platforms is the solution of init on creation of first component
instance, and term on deletion of the last, so we use that instead
(see below). It's ugly, but it's good enough for government work.

#ifdef __LINUX__
class MyDLL
{
public:
	MyDLL()
	{
		wxInit();
	}
	
	~MyDLL()
	{
		wxTerm();
	}
};

static MyDLL dll;
#endif

#ifdef __WINDOWS__
BOOL APIENTRY DllMain(HANDLE hModule, DWORD reason, LPVOID lpReserved) 
{
	switch (reason)
	{ 
		case DLL_PROCESS_ATTACH:
			if (!wxInit())
			{
				cout << "failed initialize wxWidgets" << endl;
				return FALSE;
			}
			break;
		case DLL_PROCESS_DETACH:
			wxTerm();
			break; 
	}

	return TRUE;
}
#endif
*/



////////////////	COMPONENT CLASS 

class COMPONENT_CLASS_CPP : public Process
{

public:

	//	use ctor/dtor if required
	COMPONENT_CLASS_CPP();
	~COMPONENT_CLASS_CPP();

	//	framework event function
	Symbol event(Event* event);

private:

	//	output window
	INT32 hWindow;

	//	input port
	Symbol hInput;
	TYPE inputType;

	//	parameters
	vector< vector<UINT32> > index;
	DOUBLE transform_offset, transform_range;
	DOUBLE interval;
	LOCATION location;
	string caption;
	
	//	show
	struct SHOW
	{
		SHOW()
		{
			time = true;
		}

		bool time;
	}
	show;

	//	pre-calculated indexing into source
	UINT32 elements[2]; // number of elements displayed in each ranged dim
	UINT32 strides[2]; // stride through input for each ranged dim
	UINT32 base; // offset to first source data element

	//	color map
	RGBbyte colormap[COLORMAP_RESOLUTION];

	//	timing
	BaseSamples uinterval, unext;
	DOUBLE t_conv;

	//	pointer to image buffer
	RGBbyte* p_rgb;

	//	RGB mode accepts raw RGB instead of scalar data - rgbstride will be non-zero
	UINT32 rgbstride;

};



////////////////	'STRUCTORS

UINT32 componentCount = 0;

COMPONENT_CLASS_CPP::COMPONENT_CLASS_CPP()
{
	//	on creation of first component, init wxWidgets library
	if (!(componentCount++))
	{
		int result = wxInit();
		switch (result)
		{
			case 1:
			{
				berr << "failed initialize wxWidgets (wxInitialize())";
			}
			case 2:
			{
				berr << "failed initialize wxWidgets (app did not come up in good time)";
			}
		}
	}
}

COMPONENT_CLASS_CPP::~COMPONENT_CLASS_CPP()
{
	//	on destruction of last component, term wxWidgets library
	if (!(--componentCount))
		wxTerm();
}






////////////////	EVENT FUNCTION

template <class T> void transform(T* input, RGBbyte* output, DOUBLE off, DOUBLE rng,
	UINT32 D1, UINT32 D2, UINT32 s1, UINT32 s2, RGBbyte* colormap)
{
	for (UINT32 d1=0; d1<D1; d1++)
	{
		for (UINT32 d2=0; d2<D2; d2++)
		{
			DOUBLE val = (((DOUBLE)input[d1*s1 + d2*s2]) - off) / rng;
			val = (val < 0.0 ? 0.0 : val);
			val = (val > 1.0 ? 1.0 : val);
			UINT32 uval = (UINT32) floor(val * (COLORMAP_RESOLUTION - 1.0) + 0.5);
			output[d2 + d1 * D2] = colormap[uval];
		}
	}
}

void blat(UINT8* input, RGBbyte* output,
	UINT32 D1, UINT32 D2, UINT32 s1, UINT32 s2, UINT32 rgbstride)
{
	for (UINT32 d1=0; d1<D1; d1++)
	{
		for (UINT32 d2=0; d2<D2; d2++)
		{
			output[d2 + d1 * D2].r = input[d1*s1 + d2*s2];
			output[d2 + d1 * D2].g = input[d1*s1 + d2*s2 + rgbstride];
			output[d2 + d1 * D2].b = input[d1*s1 + d2*s2 + rgbstride * 2];
		}
	}
}

Symbol COMPONENT_CLASS_CPP::event(Event* event)
{
	switch(event->type)
	{
		case EVENT_STATE_SET:
		{
			//	extract DataML
			EventStateSet* data = (EventStateSet*) event->data;
			XMLNode xmlNode(data->state);
			DataMLNode nodeState(&xmlNode);

			//	slice
			if (nodeState.hasField("index"))
			{
				DataMLNode nodeIndex = nodeState.getField("index").validate(TYPE_CELL, Dims(1, DIM_ANY));
				UINT32 N = nodeIndex.getNumberOfElementsReal();
				for (int n=0; n<N; n++)
				{
					VUINT32 range = nodeIndex.getCell(n).getArrayUINT32();
					index.push_back(range);
				}
			}
			else
			{
				VUINT32 range;
				index.push_back(range);
				index.push_back(range);
			}

			//	range
			vector<DOUBLE> range;
			if (nodeState.hasField("range"))
			{
				range = nodeState.getField("range").validate(Dims(1, 2)).getArrayDOUBLE();
			}
			else
			{
				range.push_back(0.0);
				range.push_back(1.0);
			}
			transform_offset = range[0];
			transform_range = range[1] - range[0];
			if (transform_range == 0)
				berr << "range values must not be identical";

			//	colormap
			string smap = "hot";
			if (nodeState.hasField("colormap"))
				smap = nodeState.getField("colormap").getSTRING();

			//	reference colors
			vector<RGBbyte> refcolors;
			if (nodeState.hasField("colors"))
			{
				DataMLNode nodeColors = nodeState.getField("colors");
				if (nodeColors.isCellArray())
				{
					Dims dims = nodeColors.getDims();
					for (UINT32 i=0; i<dims.getNumberOfElements(); i++)
					{
						VDOUBLE col = nodeColors.getCell(i).validate(Dims(1, 3)).getArrayDOUBLE();
						refcolors.push_back(RGBbyte(col[0], col[1], col[2]));
					}
				}
				else
				{
					VDOUBLE col = nodeColors.validate(Dims(1, 3)).getArrayDOUBLE();
					refcolors.push_back(RGBbyte(col[0], col[1], col[2]));
				}
			}

			//	interval
			interval = 0.0;
			if (nodeState.hasField("interval"))
				interval = nodeState.getField("interval").getDOUBLE();

			//	off-the-shelf colormaps
			if (smap == "hsv")
			{
				for (UINT32 i=0; i<COLORMAP_RESOLUTION; i++)
				{
					DOUBLE p = i / (COLORMAP_RESOLUTION - 1.0);
					HSVtoRGB(p, 1.0, 1.0,
						&colormap[i].r, &colormap[i].g, &colormap[i].b);
				}
			}
			else if (smap == "hot")
			{
				for (UINT32 i=0; i<COLORMAP_RESOLUTION; i++)
				{
					DOUBLE p = i / (COLORMAP_RESOLUTION - 1.0);
					DOUBLE r = p * 3.0;
					DOUBLE g = p * 3.0 - 1.0;
					DOUBLE b = p * 3.0 - 2.0;
					colormap[i] = RGBbyte(r, g, b);
				}
			}

			//	custom colormaps
			else if (smap == "lin")
			{
				//	default reference colors
				if (refcolors.size() < 1)
					refcolors.push_back(RGBbyte(0.0, 0.0, 0.0));
				if (refcolors.size() < 2)
					refcolors.push_back(RGBbyte(0.2, 0.6, 1.0));

				for (UINT32 i=0; i<COLORMAP_RESOLUTION; i++)
				{
					DOUBLE p = i / (COLORMAP_RESOLUTION - 1.0);
					colormap[i] = (refcolors[0] * (1.0-p)) + (refcolors[1] * p);
				}
			}
			else if (smap == "bilin")
			{
				//	default reference colors
				if (refcolors.size() < 1)
					refcolors.push_back(RGBbyte(0.0, 0.0, 0.0));
				if (refcolors.size() < 2)
					refcolors.push_back(RGBbyte(1.0, 0.4, 0.2));
				if (refcolors.size() < 3)
					refcolors.push_back(RGBbyte(0.2, 0.6, 1.0));

				for (UINT32 i=0; i<COLORMAP_RESOLUTION; i++)
				{
					DOUBLE p = i / (COLORMAP_RESOLUTION - 1.0);
					if (p >= 0.5)
					{
						p = (p - 0.5) * 2.0;
						colormap[i] = (refcolors[0] * (1.0-p)) + (refcolors[2] * p);
					}
					else
					{
						p = (0.5 - p) * 2.0;
						colormap[i] = (refcolors[0] * (1.0-p)) + (refcolors[1] * p);
					}
				}
			}

			//	unrecognised colormaps
			else berr << "unrecognised colormap \"" << smap << "\"";

			//	saturation colors
			if (nodeState.hasField("saturation"))
			{
				DataMLNode nodeSat = nodeState.getField("saturation");
				if (nodeSat.isCellArray())
				{
					Dims dims = nodeSat.getDims();
					if (dims.getNumberOfElements() < 1 || dims.getNumberOfElements() > 2)
						berr << "one or two saturation colors expected";

					if (dims.getNumberOfElements() == 1)
					{
						VDOUBLE col = nodeSat.getCell(0).validate(Dims(1, 3)).getArrayDOUBLE();
						colormap[0] = RGBbyte(col[0], col[1], col[2]);
						colormap[COLORMAP_RESOLUTION-1] = RGBbyte(col[0], col[1], col[2]);
					}

					else
					{
						VDOUBLE col = nodeSat.getCell(0).validate(Dims(1, 3)).getArrayDOUBLE();
						colormap[0] = RGBbyte(col[0], col[1], col[2]);
						col = nodeSat.getCell(1).validate(Dims(1, 3)).getArrayDOUBLE();
						colormap[COLORMAP_RESOLUTION-1] = RGBbyte(col[0], col[1], col[2]);
					}
				}
				else
				{
					VDOUBLE col = nodeSat.validate(Dims(1, 3)).getArrayDOUBLE();
					colormap[0] = RGBbyte(col[0], col[1], col[2]);
					colormap[COLORMAP_RESOLUTION-1] = RGBbyte(col[0], col[1], col[2]);
				}
			}

			//	show
			if (nodeState.hasField("show"))
			{
				DataMLNode nodeShow = nodeState.getField("show");

				if (nodeShow.hasField("time"))
					show.time = nodeShow.getField("time").getBOOL();
			}

			//	location
			wxRect client = wxGetApp().getClientArea();
			DOUBLE sx = client.x;
			DOUBLE sy = client.y;
			DOUBLE sw = client.width;
			DOUBLE sh = client.height;
			if (nodeState.hasField("location"))
			{
				VUINT32 loc = nodeState.getField("location").validate(Dims(1, DIM_ANY)).getArrayUINT32();
				if (loc.size() != 3 && loc.size() != 4)
					berr << "location should be 1x3 or 1x4";
				if (loc[0] < 1 || loc[0] > 16)
					berr << "location (slots x) out of range";
				UINT32 slotsx = loc[0];
				if (loc[1] < 1 || loc[1] > 16)
					berr << "location (slots y) out of range";
				UINT32 slotsy = loc[1];

				UINT32 slotx, sloty;
				if (loc.size() == 4)
				{
					slotx = loc[2] - 1;
					sloty = loc[3] - 1;
				}
				else
				{
					slotx = (loc[2] - 1) % loc[0];
					sloty = ((loc[2] - 1) - slotx) / loc[1];
				}
				if (slotx < 0 || slotx >= slotsx)
					berr << "location (slot x) out of range";
				if (sloty < 0 || sloty >= slotsy)
					berr << "location (slot y) out of range";

				DOUBLE w = sw / ((DOUBLE)slotsx);
				DOUBLE h = sh / ((DOUBLE)slotsy);
				
				location.w = w;
				location.h = h;
				location.x = sx + w * ((DOUBLE)slotx) + 1.0;
				location.y = sy + h * ((DOUBLE)sloty) + 1.0;
			}
			else
			{
				location.w = sw / 2.0;
				location.h = sh / 2.0;
				location.x = sx + sw / 4.0;
				location.y = sy + sh / 4.0;
			}

			//	caption
			if (nodeState.hasField("caption"))
				caption = nodeState.getField("caption").getSTRING();

			//	assume not RGB mode
			rgbstride = 0;

			//	ok
			return C_OK;
		}

		case EVENT_INIT_PRECONNECT:
		{
			//	validate only one input
			if (iif.getNumberOfPorts() != 1)
				berr << "expects a single input";

			//	ok
			return C_OK;
		}

		case EVENT_INIT_CONNECT:
		{
			//	on last call
			if (event->flags & F_LAST_CALL)
			{
				//	check count
				if (iif.getNumberOfPorts() != 1)
					berr << "expects 1 input";

				//	get and validate input
				hInput = iif.getPort(0);
				Symbol hData = iif.getData(hInput);
				assertClass(hData, "std/2009/data/numeric", 0);
				numeric::validate(hComponent, hData, TYPE_REAL);

				//	caption is input name, if not otherwise specified
				if (!caption.length())
				{
					ComponentData data = getComponentData(hData);
					caption = data.name;
				}

				//	get input dims
				const numeric::Structure* s = numeric::get_structure(hComponent, hData);
				inputType = s->typeElement;
				Dims inputdims = s->dims;
				UINT32 D = inputdims.size();

				//	if input is one-dimensional, pad it with a unity so that we can
				//	still display it with the same code
				if (D == 1)
				{
					inputdims.push_back(1);
					D = 2;
				}

				//	special case - if input is UINT8 type, has last dim of
				//	length 3, and has one more dimension than expected by index
				//	then it is RGB, and should be treated slightly differently
				if (inputType == TYPE_UINT8 && D == (index.size() + 1) && inputdims[D-1] == 3)
				{
					rgbstride = 1;
					D--; // discard last dimension, which we know is 3
					for (UINT32 d=0; d<D; d++)
						rgbstride *= inputdims[d];
				}

				//	validate them
				if (D != index.size())
					berr << "index should have as many entries (" << index.size() << ") as there are input dimensions (" << D << ")";
				base = 0;
				UINT32 stride = 1;
				UINT32 ranged = 0; // how many ranged dimensions we've so far found
				for (UINT32 d=0; d<D; d++)
				{
					//	get range for this dimension
					VUINT32 range = index[d];

					//	if empty, that means all
					if (range.size() == 0)
					{
						range.push_back(1);
						range.push_back(inputdims[d]);
					}

					//	handle offsets
					if (range.size() == 1)
					{
						//	validate
						if (range[0] < 1) berr << "index out of range";
						if (range[0] > inputdims[d]) berr << "index out of range";

						//	this is an offset, so we adjust base and otherwise do not use it
						base += (range[0] - 1) * stride;
					}

					//	handle range
					else if (range.size() == 2)
					{
						//	validate
						if (ranged == 2) berr << "index must range in exactly 2 dimensions (at least 3 found)";
						if (range[0] < 1) berr << "index out of range";
						if (range[1] > inputdims[d]) berr << "index out of range";
						if (range[1] < range[0]) berr << "index range must be increasing";

						//	set stride
						strides[ranged] = stride;

						//	adjust base
						base += (range[0] - 1) * stride;

						//	set elements
						elements[ranged] = range[1] - range[0] + 1;

						//	count ranged dims
						ranged++;
					}

					//	otherwise
					else berr << "each entry in index should be scalar or a two-entry row vector";

					//	update stride
					stride *= inputdims[d];
				}

				//	validate
				if (ranged != 2) berr << "index must range in exactly 2 dimensions (" << ranged << " found)";
			}

			//	ok
			return C_OK;
		}

		case EVENT_INIT_POSTCONNECT:
		{	
			//	calculate base samples per update
			DOUBLE u = floor(interval * sampleRateToRate(time->baseSampleRate) + 0.5);
			if (u < 1.0) u = 1.0;
			uinterval = u;
			unext = 0;

			//	conversion for caption
			t_conv = ((DOUBLE)time->baseSampleRate.den) / ((DOUBLE)time->baseSampleRate.num);

			//	ok
			return C_OK;
		}
		
		case EVENT_RUN_PLAY:
		{
			//	create window
			hWindow = wxGetApp().CreateWindow(location, caption);

			//	prepare window for rendering - note that we use the matlab
			//	convention that the first dimension is the column, so we
			//	display a window that has height of the first dimension and
			//	width of the second - this approach continues during rendering,
			//	below
			p_rgb = (RGBbyte*)wxGetApp().PrepareWindow(hWindow, elements[1], elements[0]);

			//	ok
			return C_OK;
		}
		
		case EVENT_RUN_SERVICE:
		{
			//	access input
			Symbol hData = iif.getData(hInput);
			void* p_input = numeric::get_content(hComponent, hData);

			//	interval
			if (time->now >= unext)
			{
				//	get next update time
				unext += uinterval;

				//	show
#ifdef DEBUG_COUT				
				bout << "wxGetApp().Lock() IN" << D_INFO;
#endif
				if (show.time)
				{
					stringstream caption;
					caption << "t = " << (time->now * t_conv) << "s";
					wxGetApp().Lock(hWindow, caption.str().c_str());
				}
				else
				{
					wxGetApp().Lock(hWindow, "");
				}
#ifdef DEBUG_COUT				
				bout << "wxGetApp().Lock() OUT" << D_INFO;
#endif

			////////	RGB MODE

				if (rgbstride)
				{

					//	blat straight to target
					blat(((UINT8*)p_input) + base, p_rgb,
						elements[0], elements[1], strides[0], strides[1],
						rgbstride);

				}



			////////	COLORMAP MODE

				else
				{

					//	call inline template function
					switch(inputType)
					{
						case TYPE_DOUBLE:
							transform(((DOUBLE*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_SINGLE:
							transform(((SINGLE*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_UINT32:
							transform(((UINT32*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_UINT16:
							transform(((UINT16*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_UINT8:
							transform(((UINT8*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_INT32:
							transform(((INT32*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_INT16:
							transform(((INT16*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						case TYPE_INT8:
							transform(((INT8*)p_input) + base, p_rgb,
								transform_offset, transform_range,
								elements[0], elements[1], strides[0], strides[1],
								&colormap[0]);
							break;

						default:
							berr << "unhandled numeric type " << getElementTypeString(inputType);
					}

				}



				//	access target
#ifdef DEBUG_COUT				
				bout << "wxGetApp().Unlock() IN" << D_INFO;
#endif
				wxCondError err = wxGetApp().Unlock(hWindow);
				if (err == wxCOND_TIMEOUT) bout << "wxCOND_TIMEOUT waiting for window update (" << getComponentData(hComponent).name << ")" << D_WARN;
#ifdef DEBUG_COUT				
				bout << "wxGetApp().Unlock() OUT" << D_INFO;
#endif

			}

			//	ok
			return C_OK;
		}

		case EVENT_RUN_STOP:
		{
			//	create window
			wxGetApp().DestroyWindow(hWindow);

			//	ok
			return C_OK;
		}
		
	}

	//	not serviced
	return S_NULL;
}







//	include overlay (a second time)
#include "brahms-1199.h"

