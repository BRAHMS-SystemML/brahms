#________________________________________________________________
#
#	This is the platform-independent makefile for this
#	module. You will need to have UnxUtils installed to
#	make it work on Windoze:
#
#		http://unxutils.sourceforge.net
#________________________________________________________________
#
#	This file is part of BRAHMS
#	Copyright (C) 2007 Ben Mitchinson
#	URL: http://brahms.sourceforge.net
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License
#	as published by the Free Software Foundation; either version 2
#	of the License, or (at your option) any later version.
#
#	This program is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with this program; if not, write to the Free Software
#	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#________________________________________________________________
#
#	Subversion Repository Information (automatically updated on commit)
#
#	$Id:: makefile.brahms 2446 2010-01-12 16:57:41Z benjmitch  $
#	$Rev:: 2446                                                $
#	$Author:: benjmitch                                        $
#	$Date:: 2010-01-12 16:57:41 +0000 (Tue, 12 Jan 2010)       $
#________________________________________________________________
#




# This file is common to all other makefiles in the BRAHMS
# project.
# 
# To override settings in this file, create one of the files
# that is included at the bottom of this one.




#### OS detection

ifeq (${strip ${shell uname -s}}, windows32)
ARCH_OS=win
ARCH_NIX=0
endif

ifeq (${strip ${shell uname -s}}, Darwin)
ARCH_OS=osx
ARCH_NIX=1
endif

ifeq (${strip ${shell uname -s}}, Linux)
ARCH_OS=gln
ARCH_NIX=1
endif

ifeq ($(ARCH_OS), )
${error Unable to identify platform - modify makefile.brahms}
endif

# 64-bit detection (plus define ARCH_NIX)
ifeq ($(ARCH_OS), win)
POSS64=${shell echo $(PROCESSOR_ARCHITEW6432)$(PROCESSOR_IDENTIFIER) | grep 64}
else
POSS64=${shell uname -a | grep 64}
endif
ifeq ($(POSS64), )
TRUE_ARCH_BITS=32
else
TRUE_ARCH_BITS=64
endif

# we can't do 64-bit compile with the free cl.exe, so
# i'm just making it do a 32-bit compile, despite being
# on a 64-bit machine. or perhaps it *can* do it, but i
# don't know what the flags are. anyway.
ifeq ($(ARCH_OS), win)
ifeq ($(TRUE_ARCH_BITS), 64)
#${warning not compiling 64-bit - see notes in makefile.brahms}
endif
ARCH_BITS=32
else
ARCH_BITS=$(TRUE_ARCH_BITS)
endif


# collate
ARCH=$(ARCH_OS)$(ARCH_BITS)

# use sh on nix
ifeq ($(ARCH_NIX), 1)
shell=sh
endif



# overall version
VERSION_BRAHMS_MAJ=0
VERSION_BRAHMS_MIN=7
VERSION_BRAHMS_REL=3

# get revision number of latest commit in this folder
#ifeq ($(ARCH_NIX), 1)
#VERSION_BRAHMS_REV=${shell svnversion -n . | sed s/.\*:// | sed s/M//}
#else
#VERSION_BRAHMS_REV=${shell svnversion -n . | sed s/.*:// | sed s/M//}
#endif
#ifeq ($(VERSION_BRAHMS_REV),exported)
#	VERSION_BRAHMS_REV=2695
#endif

VERSION_BRAHMS_REV=9999

# SystemML version
VERSION_SYSTEMML_MAJ=$(VERSION_BRAHMS_MAJ)
VERSION_SYSTEMML_MIN=$(VERSION_BRAHMS_MIN)
VERSION_SYSTEMML_REL=$(VERSION_BRAHMS_REL)
VERSION_SYSTEMML_REV=$(VERSION_BRAHMS_REV)





# space variable for use below
EMPTY=
SPACE=$(EMPTY) $(EMPTY)

# install path
ifeq ($(SYSTEMML_INSTALL_PATH),)
${error set SYSTEMML_INSTALL_PATH}
endif
PATH_SML=${subst $(SPACE),\$(SPACE),${subst \,/,$(SYSTEMML_INSTALL_PATH)}}
PATH_BRM=$(PATH_SML)/BRAHMS

# temp path
ifeq ($(SYSTEMML_TEMP_PATH),)
${error set SYSTEMML_TEMP_PATH}
endif
PATH_TMP = ${subst $(SPACE),\$(SPACE),${subst \,/,$(SYSTEMML_TEMP_PATH)}}

# paths under install path
PATH_BIN = $(PATH_BRM)/bin
PATH_INC = $(PATH_BRM)/include
PATH_BDG = $(PATH_BRM)/bindings
PATH_SUP = $(PATH_BRM)/support
PATH_MED = $(PATH_BRM)/media

PATH_SUP_DOC = $(PATH_SUP)/docs
PATH_SUP_EXA = $(PATH_SUP)/example
PATH_SUP_TEM = $(PATH_SUP)/template
PATH_SUP_TUT = $(PATH_SUP)/tutorial
PATH_SUP_BCH = $(PATH_SUP)/bench
PATH_SUP_CHK_ENG = $(PATH_SUP)/checkengine

PATH_BDG_INV = $(PATH_BDG)/invocation
PATH_BDG_INV_MAT = $(PATH_BDG_INV)/995
PATH_BDG_CMP = $(PATH_BDG)/component
PATH_BDG_CMP_MAT = $(PATH_BDG_CMP)/1258
PATH_BDG_CMP_PYT = $(PATH_BDG_CMP)/1262
PATH_BDG_CMP_JAV = $(PATH_BDG_CMP)/1654

PATH_SML_NSP = $(PATH_SML)/Namespace
PATH_GRP = $(PATH_SML_NSP)/$(GROUP)

PATH_TBX = $(PATH_SML)/SystemMLToolbox


# versioning
VER3=$(MAJ).$(MIN).$(REL)
VER4=$(MAJ).$(MIN).$(REL).$(REV)

# interface files
IF_ENG=$(PATH_INC)/brahms-client.h
IF_CMP=$(PATH_INC)/brahms-component.h
IF_BOTH=$(IF_ENG) $(IF_CMP)
IF_1199=$(PATH_INC)/brahms-1199.h






# OS-specific stuff
ifeq ($(ARCH_OS), gln)

	# file extensions
	EXTDLL=so.$(VER3)						# framework module
	EXTDLL_1=so.$(MAJ)					# ln -s .../so.1.2.3 .../so.1
	EXTDLL_2=so									# ln -s .../so.1 .../so
	EXTCMP=so.$(REL)						# component modules (Note that $(REL) is the major version number for a component)
	EXTSHLIB=so
	
	# specifics for this NIX OS
	DEFINE_OS=-D__GLN__
	FLAG_PTHREAD=-pthread
	FLAG_SHARED=-shared
	FLAG_ARCH=

endif



# OS-specific stuff
ifeq ($(ARCH_OS), osx)

	# file extensions
	EXTDLL=$(VER3).dylib
	EXTDLL_1=$(MAJ).dylib
	EXTDLL_2=dylib
	EXTCMP=$(REL).dylib
	EXTSHLIB=dylib

	# specifics for this NIX OS
	DEFINE_OS=-D__OSX__
	FLAG_PTHREAD=
	FLAG_SHARED=-dynamiclib
	
	# currently, i only know for sure how to build 32-bit
ifeq ($(ARCH_BITS),32)
	FLAG_ARCH=-arch i386
else
	FLAG_ARCH=-arch x86_64
	${error worth a go, but keep an eye on things}
endif

endif



# OS-specific stuff
ifeq ($(ARCH_NIX), 1)

	EMPTY_LINE=@echo
	HEADER_LINE=@echo \\\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
	MKDIR=${shell mkdir -p ${strip $(1)}}
	CAT=@cat
	SHOW_MAKING=@echo "    ==>"
	ONEARG=$(1)

	# compiler
	CC=gcc
	CPPFLAGS=-fvisibility=hidden -fvisibility-inlines-hidden
	CXX=g++ $(CPPFLAGS)
	NAMEEXE=-o$(SPACE)
	NAMEOBJ=-o$(SPACE)
	STAR=*
	QUOTE='
	SLASH=/

	# file extensions
	EXTOBJ=o
	EXTEXE=
	EXTBAT=

	#	miscellaneous
	BUILDFILE=build
	
	# don't compile WX on GTK (doesn't currently work)
#	NOWX=1

	# compiler flags
	# TODO -fno-strict-aliasing is a temp fix; should compile without this sometime soon (use -fstrict-aliasing instead, to force it where it is not the default)
	DEFINES=$(DEFINE_OS)
ifeq ($(EASY_BUILD), 1)
	CFLAGS=-fPIC -ffast-math $(FLAG_PTHREAD) $(FLAG_ARCH) -Wfatal-errors -fno-strict-aliasing
else
	CFLAGS=-fPIC -Werror -Wall -ffast-math $(FLAG_PTHREAD) $(FLAG_ARCH) -Wfatal-errors -fno-strict-aliasing
endif

	# paths
	INCLUDES='-I$(PATH_INC)'

	# linker flags
	LOPT_BASE='-L$(PATH_BIN)' '-L$(PATH_TMP)'

	# group data
	COPT_COMPONENT='-I$(PATH_SML_NSP)' $(FLAG_SHARED)
	LOPT_COMPONENT=-lbrahms-engine

	#	build mode
ifeq ($(BUILD),)
	# default (not defined) is optimised release build
	OFLAGS=-O3
else
ifeq ($(BUILD),DEBUG)
	# debug build has debug compile and DEBUG defined
	OFLAGS=-DDEBUG -ggdb3
${warning BUILD=DEBUG}
else
	# any other definition of BUILD has neither optim nor debug
	OFLAGS=
${warning BUILD=NULL}
endif
endif

endif



# OS-specific stuff
ifeq ($(ARCH_OS), win)

	EMPTY_LINE=@empty_line
	HEADER_LINE=@echo \#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#\#
	MKDIR=${shell mkdir "${subst \ , ,${subst /,\,${strip $(1)}}}" 2>NUL}
	CAT=@cat
	SHOW_MAKING=@echo ^ ^ ^ ^ ==^>
	ONEARG="${strip ${subst \ , ,$(1)}}"

	ARCH_NIX=

	# compiler
	CC=cl
	CPPFLAGS=-EHsc
	CXX=cl $(CPPFLAGS)
	NAMEEXE=-Fe
	NAMEOBJ=-Fo
	STAR=\*
	QUOTE="
	SLASH=\\\\

	# compiler flags
	FLAG_SHARED=# no flag required in this arch

	# file extensions (versioned, component libraries)
	EXTDLL=dll
	EXTCMP=$(REL).dll
	EXTSHLIB=dll

	# file extensions
	EXTOBJ=obj
	EXTEXE=.exe
	EXTBAT=.bat

	# compiler flags
	DEFINES=-D__WIN__
	CFLAGS=-nologo -MD

	# we can skip -MD if we want the builds to avoid dependence on msvcrt & msvcp

	#	build mode
ifeq ($(BUILD),)
	# default (not defined) is optimised release build
	OFLAGS=-Ox
else
ifeq ($(BUILD),DEBUG)
	# debug build has debug compile and DEBUG defined
	OFLAGS=-Zi -DDEBUG
${warning BUILD=DEBUG}
else
	# any other definition of BUILD has neither optim nor debug
	OFLAGS=
${warning BUILD=NULL}
endif
endif

	#	paths
	INCLUDES="-I${subst \ , ,$(PATH_INC)}"
	
	#	linker flags
ifeq ($(ARCH_BITS), 64)
	LOPT_64=/MACHINE:x64
else
	LOPT_64=
endif
	# -OPT:NOWIN98 reduces dll size slightly (http://msdn.microsoft.com/en-us/magazine/cc301696.aspx or google "the magic switch is")
	LOPT_BASE=-link $(LOPT_64) -LIBPATH:${call ONEARG,$(PATH_BIN)} -LIBPATH:${call ONEARG,$(PATH_TMP)} -OPT:NOWIN98

	#	miscellaneous
	BUILDFILE=build.bat
	
	# group data
	COPT_COMPONENT="-I${subst \$(SPACE),$(SPACE),$(PATH_SML_NSP)}" -LD
	LOPT_COMPONENT=-EXPORT:EventHandler libbrahms-engine.lib

endif

COPT_BASE=$(DEFINES) -DARCH_BITS=$(ARCH_BITS) $(CFLAGS) $(OFLAGS) $(INCLUDES)



# If a site-specific BRAHMS makefile exists, include that here
-include $(PATH_BRM)/makefile.install
-include ~/.BRAHMS/makefile.user


