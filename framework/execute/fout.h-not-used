/*
________________________________________________________________

	This file is part of BRAHMS
	Copyright (C) 2007 Ben Mitchinson
	URL: http://brahms.sourceforge.net

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
________________________________________________________________

	Subversion Repository Information (automatically updated on commit)

	$Id:: fout.h-not-used 2287 2009-11-02 02:55:13Z benjmitch  $
	$Rev:: 2287                                                $
	$Author:: benjmitch                                        $
	$Date:: 2009-11-02 02:55:13 +0000 (Mon, 02 Nov 2009)       $
________________________________________________________________

*/






////////////////    OUTPUT DETAIL LEVEL

	//	safely in C++, we change detail level to be a typed value (enum)
	#undef D_NONE
	#undef D_WARN
	#undef D_INFO
	#undef D_VERB
	#undef D_FULL

	//	have to specify values of each, so they match those used in the #define's
	enum EnumDetailLevel
	{
		D_NONE =    0x00,       //  normal levels
		D_WARN =    0x20,
		D_INFO =    0x40,
		D_VERB =    0x60,
		D_FULL =    0x80,
	
		D_INFO_UNHIDEABLE = 0xA0 // D_INFO, semantically, but cannot be hidden (e.g. additional information required to debug an E_DEADLOCK)
	};



////////////////    OUTPUT OBJECT

	class ComponentOut
	{

	public:

		ComponentOut()
		{
			hEngine = S_NULL;
		}

		void init(Symbol p_hEngine)
		{
			hEngine = p_hEngine;
		}

		void operator<<(EnumDetailLevel level)
		{
			OutputMessage data;
			data.hCaller = hEngine;
			data.msg = buffer.c_str();
			data.flags = 0;
			data.level = level;
			brahms_outputMessage(&data);
			buffer = "";
		}

		template<class T> ComponentOut& operator<<(const T& data)
		{
			std::ostringstream ss;
			ss << data;
			buffer += ss.str();
			return *this;
		}

		template<class T> ComponentOut& operator<<(T& (*data)(T&))
		{
			std::ostringstream ss;
			ss << data;
			buffer += ss.str();
			return *this;
		}

	private:

		std::string buffer;
		Symbol hEngine;

	};


